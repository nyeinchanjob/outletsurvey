(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Rows'"
p3
sS'layer'
p4
S'/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\nfrom gluon.serializers import json\nfrom gluon.tools import geocode\n\n@auth.requires_login()\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\nlatitude = longitude = \'\'\ndef getGPS():\n    form=SQLFORM.factory(Field(\'search\'), _class=\'form-search\')\n    form.custom.widget.search[\'_class\'] = \'input-long search-query\'\n    form.custom.submit[\'_value\'] = \'Search\'\n    form.custom.submit[\'_class\'] = \'btn\'\n    if form.accepts(request):\n        address=form.vars.search\n        (latitude, longitude) = geocode(address)\n    else:\n        (latitude, longitude) = (\'\',\'\')\n    return dict(form=form, latitude=latitude, longitude=longitude)\n\ndef setup():\n    grid = SQLFORM.smartgrid(\n        db.setup,\n        paginate=10,\n        csv=False,\n        details=False,\n        orderby = db.setup.name,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Setup\'\n    return dict(form=grid)\n\ndef outlet():\n    def redirectToDetail(form):\n        survey_id = form.vars.id\n        redirect(URL(\'outletQuestion\', vars=dict(survey_id=survey_id)))\n    grid = SQLFORM.grid(db.survey,\n            oncreate=redirectToDetail,\n            onupdate=redirectToDetail)\n\n    response.moduleTitle = \'Outlet Information\'\n    return dict(grid=grid)\n\ndef outletQuestion():\n    survey_id = request.vars.survey_id\n    if type(survey_id) == list:\n        survey_id = survey_id[-1]\n    db.question.survey_id.default = survey_id\n    form = SQLFORM(db.question)\n    form.add_button("Back", URL(\'default\', \'outlet\'))\n    if form.process().accepted:\n        redirect(URL(\'outletQuestion\', vars=dict(survey_id=survey_id)))\n    response.moduleTitle = \'Question\'\n    return dict(form=form, survey_id=survey_id)\n\ndef questionslist():\n    survey_id = request.vars.survey_id\n    where = (db.question.survey_id == survey_id)\n    grid = SQLFORM.grid(where, create=False, editable=False, details=False)\n    return dict(grid=grid)\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(outlet)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nyeinchan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py", line 119, in <module>\n  File "/home/nyeinchan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py", line 78, in outlet\n    onupdate=redirectToDetail)\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 2502, in grid\n    search_menu = SQLFORM.search_menu(sfields, prefix=prefix)\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 1923, in search_menu\n    _class=\'form-control\',\n  File "/home/nyeinchan/web2py/gluon/validators.py", line 598, in options\n    self.build_set()\n  File "/home/nyeinchan/web2py/gluon/validators.py", line 584, in build_set\n    records = self.dbset(table).select(*fields, **dd)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nTypeError: long() argument must be a string or a number, not \'Rows\'\n'
p11
s.