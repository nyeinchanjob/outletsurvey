(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1054, u"Unknown column \'image3\' in \'field list\'")'
p3
sS'layer'
p4
S'/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\nfrom gluon.serializers import json\nfrom gluon.tools import geocode\n\n@auth.requires_login()\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\nlatitude = longitude = \'\'\ndef getGPS():\n    form=SQLFORM.factory(Field(\'search\'), _class=\'form-search\')\n    form.custom.widget.search[\'_class\'] = \'input-long search-query\'\n    form.custom.submit[\'_value\'] = \'Search\'\n    form.custom.submit[\'_class\'] = \'btn\'\n    if form.accepts(request):\n        address=form.vars.search\n        (latitude, longitude) = geocode(address)\n    else:\n        (latitude, longitude) = (\'\',\'\')\n    return dict(form=form, latitude=latitude, longitude=longitude)\n\ndef setup():\n    grid = SQLFORM.smartgrid(\n        db.setup,\n        paginate=10,\n        csv=False,\n        details=False,\n        orderby = db.setup.name,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Setup\'\n    return dict(form=grid)\n\ndef outlet():\n    def redirectToDetail(form):\n        survey_id = form.vars.id\n        redirect(URL(\'outletQuestion\', vars=dict(survey_id=survey_id)))\n    grid = SQLFORM.grid(db.survey,\n            oncreate=redirectToDetail,\n            onupdate=redirectToDetail)\n\n    response.moduleTitle = \'Outlet Information\'\n    return dict(grid=grid)\n\ndef outletQuestion():\n    survey_id = request.vars.survey_id\n    if type(survey_id) == list:\n        survey_id = survey_id[-1]\n    db.question.survey_id.default = survey_id\n    form = SQLFORM(db.question)\n    form.add_button("Back", URL(\'default\', \'outlet\'))\n    if form.process().accepted:\n        redirect(URL(\'outletQuestion\', vars=dict(survey_id=survey_id)))\n    response.moduleTitle = \'Question\'\n    return dict(form=form, survey_id=survey_id)\n\ndef questionslist():\n    survey_id = request.vars.survey_id\n    where = (db.question.survey_id == survey_id)\n    grid = SQLFORM.grid(where, create=False, editable=False, details=False)\n    return dict(grid=grid)\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(outlet)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nyeinchan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py", line 119, in <module>\n  File "/home/nyeinchan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py", line 78, in outlet\n    onupdate=redirectToDetail)\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 2308, in grid\n    onsuccess=oncreate)\n  File "/home/nyeinchan/web2py/gluon/html.py", line 2298, in process\n    self.validate(**kwargs)\n  File "/home/nyeinchan/web2py/gluon/html.py", line 2236, in validate\n    if self.accepts(**kwargs):\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 1746, in accepts\n    self.vars.id = self.table.insert(**fields)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/objects.py", line 726, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 746, in insert\n    raise e\nInternalError: (1054, u"Unknown column \'image3\' in \'field list\'")\n'
p11
s.