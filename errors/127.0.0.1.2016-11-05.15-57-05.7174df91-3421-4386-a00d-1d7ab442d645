(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'int' object has no attribute 'name'"
p3
sS'layer'
p4
S'/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n# from gluon.answerizers import json\nfrom gluon.tools import geocode\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow\n    administrator to manage users\n    """\n    return dict(form=auth())\n\n@auth.requires(\n    auth.has_membership(\'Manager\') or\n    auth.has_membership(\'Admin\')\n)\ndef outlet():\n    grid = SQLFORM.smartgrid(\n        db.outlet,\n        paginate=10,\n        csv=False,\n        details=False,\n        orderby =~db.outlet.id,\n        linked_tables=False\n\t\t#editable=auth.has_membership(\'Admin\', \'Manager\')\n    )\n    response.moduleTitle = \'Outlet Type\'\n    return dict(form=grid)\n\n\n@auth.requires(\n    auth.has_membership(\'Manager\') or\n    auth.has_membership(\'Admin\')\n)\ndef question():\n    grid = SQLFORM.smartgrid(\n        db.question,\n        paginate=10,\n        csv=False,\n        details=False,\n        orderby =~db.question.id,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Question Type\'\n    return dict(form=grid)\n\ndef location():\n\tform=SQLFORM.factory(Field(\'latitude\', label=\'Latitude\', requires=IS_NOT_EMPTY()),\n\t\t\tField(\'longitude\', label=\'Longitude\', requires=IS_NOT_EMPTY()),\n\t\t\tField(\'search\'), _class=\'form-search\'\n\t)\n\t#form.custom.widget.search[\'_class\'] = \'input-long search-query\'\n\t#form.custom.submit[\'_value\'] = \'Search\'\n\t#form.custom.submit[\'_class\'] = \'btn\'\n\tresponse.moduleTitle = \'Locaiton\'\n\treturn dict(form=form)\n\n@auth.requires(\n    auth.has_membership(\'Manager\') or\n    auth.has_membership(\'Admin\') or\n    auth.has_membership(\'User\')\n)\n\ndef survey():\n    export_classes = dict(csv=True, json=False, html=False,\n        tsv=False, xml=False, csv_with_hidden_cols=False,\n        tsv_with_hidden_cols=False)\n    def redirectToDetail(form):\n        survey_id = form.vars.id\n        redirect(URL(\'surveydetail\', vars=dict(survey_id=survey_id)))\n    form = SQLFORM.grid(db.survey, fields=[db.survey.id, db.survey.outlet_en,\n        db.survey.outlet_type, db.survey.owner_en,\n        db.survey.phone1, db.survey.street_en, db.survey.ward_en,\n        db.survey.township_en, db.survey.city_en,\n        db.survey.area],\n            details=False,\n            paginate=20,\n            orderby=~db.survey.id|db.survey.city_en,\n            user_signature=False,\n            oncreate=redirectToDetail,\n            onupdate=redirectToDetail,\n            showbuttontext=False,\n            exportclasses=export_classes)\n    response.moduleTitle = \'Outlet Information\'\n    return dict(form=form)\n\ndef surveydetail():\n    survey_id = request.vars.survey_id\n    if type(survey_id) == list:\n        survey_id = survey_id[-1]\n    db.survey_detail.survey_id.default = survey_id\n    db.survey_detail.survey_id.readable = False\n    form = SQLFORM(db.survey_detail)\n    form.add_button("Back", URL(\'default\', \'survey\'))\n    if form.process().accepted:\n        redirect(URL(\'surveydetail\', vars=dict(survey_id=survey_id)))\n    response.moduleTitle = \'Question and Answer\'\n    return dict(form=form, survey_id=survey_id)\n\ndef surveydetaillist():\n    survey_id = request.vars.survey_id\n    where = (db.survey_detail.survey_id == survey_id)\n    grid = SQLFORM.grid(where, create=False, editable=False, details=False, csv=False)\n    return dict(grid=grid)\n\ndef report():\n    def questionlist(row):\n        questions = db((db.survey_detail.survey_id == row.id) &\n                     (db.survey_detail.question_id == db.question.id)).select(\n                        db.question.name,\n                        db.survey_detail.answer\n                     )\n        return ", ".join(["%s + %s" % (question.question.name, question.survey_detail.answer) for question in questions])\n    # virtual_columns = [ db.survey["question_%s" % (i+1)] for i in range(3)]\n    virtual_columns = [ db.survey[row.name] for row, i in enumerate(db(db.question).select())]\n    surveyList = SQLFORM.grid(db.survey,\n                             fields=[ db.question.name,\n                                    db.survey.id, db.survey.questions,\n                                    ] + virtual_columns\n                             )\n    return dict(form=surveyList)\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\ndef about():\n\n    response.moduleTitle = \'About\'\n    return dict(message=T(\'Welcome Outlet Survey System!\'))\n\n@request.restful()\ndef api():\n    response.view = \'generic.\' + (request.extension or \'json\')\n    def GET(*args, **vars):\n        patterns = \'auto\'\n        parser = db.parse_as_rest(patterns, args, vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n\n    # @auth.requires_login()\n    def POST(table_name, **vars):\n        return db[table_name].validate_and_insert(**vars)\n\n    @auth.requires_login()\n    def PUT(table_name, record_id, **vars):\n        return db(db[table_name]._id == record_id).update(**vars)\n\n    @auth.requires_login()\n    def DELETE(table_name, record_id):\n        return db(db[table_name]._id == record_id).delete()\n\n    return dict(GET=GET, POST=POST, PUT=PUT, DELETE=DELETE)\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(report)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nyeinchan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py", line 202, in <module>\n  File "/home/nyeinchan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nyeinchan/web2py/applications/outletsurvey/controllers/default.py", line 147, in report\n    virtual_columns = [ db.survey[row.name] for row, i in enumerate(db(db.question).select())]\nAttributeError: \'int\' object has no attribute \'name\'\n'
p11
s.